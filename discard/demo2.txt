import React, { useEffect, useRef, useState } from 'react';
import axios from 'axios';

function ConsoleComponent() {
    const [streaming, setStreaming] = useState(false);
    const [viewCode, setViewCode] = useState(false);
    const [processedFrame, setProcessedFrame] = useState(null);
    const [command, setCommand] = useState('');
    const videoRef = useRef(null);
    const canvasRef = useRef(null);
    const intervalRef = useRef(null);

    const backendURL = 'http://localhost:5000'; // Adjust for deployment

    // Start webcam and begin sending frames
    const startWebcam = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true });
            videoRef.current.srcObject = stream;
            setStreaming(true);

            intervalRef.current = setInterval(() => {
                captureAndSendFrame();
            }, 200); // Every 200ms
        } catch (err) {
            console.error('Error accessing webcam:', err);
        }
    };

    // Stop webcam and frame streaming
    const stopWebcam = () => {
        if (videoRef.current.srcObject) {
            videoRef.current.srcObject.getTracks().forEach(track => track.stop());
        }
        clearInterval(intervalRef.current);
        setStreaming(false);
    };

    // Capture frame and send to backend
    const captureAndSendFrame = () => {
        const canvas = canvasRef.current;
        const ctx = canvas.getContext('2d');
        canvas.width = videoRef.current.videoWidth;
        canvas.height = videoRef.current.videoHeight;
        ctx.drawImage(videoRef.current, 0, 0, canvas.width, canvas.height);

        canvas.toBlob(blob => {
            const formData = new FormData();
            formData.append('frame', blob, 'frame.jpg');

            axios.post(`${backendURL}/process-frame`, formData)
                .then(res => {
                    const { processed_frame, command } = res.data;
                    setProcessedFrame(processed_frame);
                    setCommand(command);
                })
                .catch(err => {
                    console.error('Frame send error:', err);
                });
        }, 'image/jpeg');
    };

    return (
        <div style={{ textAlign: 'center', padding: '20px' }}>
            <h1>WaveDrive | Gesture Control</h1>

            <div style={{ display: 'flex', justifyContent: 'center', gap: '20px' }}>
                <video
                    ref={videoRef}
                    width="320"
                    height="240"
                    autoPlay
                    playsInline
                    style={{ display: streaming ? 'block' : 'none' }}
                />
                <canvas ref={canvasRef} style={{ display: 'none' }} />
                {processedFrame ? (
                    <img src={processedFrame} width="320" height="240" alt="Processed Frame" />
                ) : (
                    <div style={{ width: '320px', height: '240px', backgroundColor: '#eee' }} />
                )}
            </div>

            <h3>Command: {command || "Waiting..."}</h3>

            <div style={{ marginTop: '20px' }}>
                <button onClick={streaming ? stopWebcam : startWebcam} style={buttonStyle}>
                    {streaming ? "Stop Webcam" : "Start Webcam"}
                </button>
                <button onClick={() => setViewCode(!viewCode)} style={buttonStyle}>
                    {viewCode ? "Hide Code" : "View Code"}
                </button>
            </div>

            {viewCode && (
                <pre style={{ backgroundColor: '#f4f4f4', padding: '10px', borderRadius: '5px', marginTop: '20px', overflowX: 'auto' }}>
{`// Frame is captured and sent to Flask backend using Axios every 200ms
// Flask processes it using MediaPipe and returns:
//  - processed_frame (with landmarks drawn)
//  - gesture command
// Frontend displays both processed image and gesture in real-time.`}
                </pre>
            )}
        </div>
    );
}

// Button styling
const buttonStyle = {
    padding: '10px 20px',
    fontSize: '16px',
    margin: '10px',
    cursor: 'pointer',
    border: 'none',
    borderRadius: '5px',
    backgroundColor: '#007BFF',
    color: 'white'
};

export default ConsoleComponent;
