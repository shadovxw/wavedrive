import base64
import cv2
import numpy as np
import mediapipe as mp
from flask import Flask, request, jsonify
from flask_cors import CORS

app = Flask(__name__)
CORS(app)  # Enable CORS for Axios requests

mp_hands = mp.solutions.hands
mp_drawing = mp.solutions.drawing_utils
hands = mp_hands.Hands()

def gesture_controls(landmarks, frame):
    command = 'stop'

    if (landmarks[2][1] > landmarks[4][1] and
        landmarks[7][1] > landmarks[8][1] and
        landmarks[11][1] > landmarks[12][1] and
        landmarks[15][1] > landmarks[16][1] and
        landmarks[19][1] > landmarks[20][1]):
        command = 'forward'
    elif (landmarks[0][1] < landmarks[5][1] and
          landmarks[0][1] < landmarks[9][1] and
          landmarks[0][1] < landmarks[13][1] and
          landmarks[0][1] < landmarks[17][1]):
        command = 'backward'
    elif (landmarks[4][0] < landmarks[8][0]):
        command = 'left'
    elif (landmarks[4][0] > landmarks[8][0]):
        command = 'right'
    else:
        command = 'stop'

    return command

@app.route('/')
def index():
    return "MediaPipe Gesture Server Running via Axios POST"

@app.route('/process-frame', methods=['POST'])
def process_frame():
    if 'frame' not in request.files:
        return jsonify({'error': 'No frame provided'}), 400

    file = request.files['frame']
    npimg = np.frombuffer(file.read(), np.uint8)
    frame = cv2.imdecode(npimg, cv2.IMREAD_COLOR)

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    results = hands.process(rgb_frame)

    command = 'stop'
    if results.multi_hand_landmarks:
        hand_landmarks = results.multi_hand_landmarks[0]
        mp_drawing.draw_landmarks(frame, hand_landmarks, mp_hands.HAND_CONNECTIONS)
        landmarks = [(lm.x, lm.y, lm.z) for lm in hand_landmarks.landmark]
        command = gesture_controls(landmarks, frame)

    # Encode the processed frame back to base64
    _, buffer = cv2.imencode('.jpg', frame)
    encoded_frame = base64.b64encode(buffer).decode('utf-8')
    data_url = f"data:image/jpeg;base64,{encoded_frame}"

    return jsonify({
        'command': command,
        'processed_frame': data_url
    })

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
